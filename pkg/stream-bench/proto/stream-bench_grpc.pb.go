// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/stream-bench.proto

package stream_bench

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamBenchClient is the client API for StreamBench service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamBenchClient interface {
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (StreamBench_WatchClient, error)
	WatchSeparated(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (StreamBench_WatchSeparatedClient, error)
}

type streamBenchClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamBenchClient(cc grpc.ClientConnInterface) StreamBenchClient {
	return &streamBenchClient{cc}
}

func (c *streamBenchClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (StreamBench_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamBench_ServiceDesc.Streams[0], "/stream_bench.StreamBench/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamBenchWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamBench_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type streamBenchWatchClient struct {
	grpc.ClientStream
}

func (x *streamBenchWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamBenchClient) WatchSeparated(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (StreamBench_WatchSeparatedClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamBench_ServiceDesc.Streams[1], "/stream_bench.StreamBench/WatchSeparated", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamBenchWatchSeparatedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamBench_WatchSeparatedClient interface {
	Recv() (*SeparatedWatchResponse, error)
	grpc.ClientStream
}

type streamBenchWatchSeparatedClient struct {
	grpc.ClientStream
}

func (x *streamBenchWatchSeparatedClient) Recv() (*SeparatedWatchResponse, error) {
	m := new(SeparatedWatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamBenchServer is the server API for StreamBench service.
// All implementations should embed UnimplementedStreamBenchServer
// for forward compatibility
type StreamBenchServer interface {
	Watch(*WatchRequest, StreamBench_WatchServer) error
	WatchSeparated(*WatchRequest, StreamBench_WatchSeparatedServer) error
}

// UnimplementedStreamBenchServer should be embedded to have forward compatible implementations.
type UnimplementedStreamBenchServer struct {
}

func (UnimplementedStreamBenchServer) Watch(*WatchRequest, StreamBench_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedStreamBenchServer) WatchSeparated(*WatchRequest, StreamBench_WatchSeparatedServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchSeparated not implemented")
}

// UnsafeStreamBenchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamBenchServer will
// result in compilation errors.
type UnsafeStreamBenchServer interface {
	mustEmbedUnimplementedStreamBenchServer()
}

func RegisterStreamBenchServer(s grpc.ServiceRegistrar, srv StreamBenchServer) {
	s.RegisterService(&StreamBench_ServiceDesc, srv)
}

func _StreamBench_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamBenchServer).Watch(m, &streamBenchWatchServer{stream})
}

type StreamBench_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type streamBenchWatchServer struct {
	grpc.ServerStream
}

func (x *streamBenchWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamBench_WatchSeparated_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamBenchServer).WatchSeparated(m, &streamBenchWatchSeparatedServer{stream})
}

type StreamBench_WatchSeparatedServer interface {
	Send(*SeparatedWatchResponse) error
	grpc.ServerStream
}

type streamBenchWatchSeparatedServer struct {
	grpc.ServerStream
}

func (x *streamBenchWatchSeparatedServer) Send(m *SeparatedWatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StreamBench_ServiceDesc is the grpc.ServiceDesc for StreamBench service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamBench_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream_bench.StreamBench",
	HandlerType: (*StreamBenchServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _StreamBench_Watch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchSeparated",
			Handler:       _StreamBench_WatchSeparated_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/stream-bench.proto",
}
